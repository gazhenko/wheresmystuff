package edu.gatech.cs2340.thenullterminators.wheresmystuff;

import java.util.ArrayList;

import android.os.Bundle;
import android.app.Activity;
import android.content.Intent;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;

public class FilterItems extends Activity {
	
	// local variables
	private EditText nameInput, rewardInput, locStateInput,locCityInput, monthInput, 
		dayInput, yearInput;
	private Spinner categoryList;
	private RadioGroup rgDate,rgLostFound,rgResolve;
	private RadioButton after,before,exact,resolve,notResolve;
	private Button bFilter;
	private Button bCancel;
	private String strName, strReward, strLocCity,strLocState, strMonth, strDay, strYear, 
		strCategory;
	private boolean boolFound,boolLost,isResolved;
	private int rewardChoice,dateChoice;
	private ArrayList<Item> filteredArray = Search.items;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_filter_items);
		
		// set up local variables with their respective id's
		after = (RadioButton) findViewById(R.id.search_date_button_above);
		before = (RadioButton) findViewById(R.id.search_date_button_before);
		exact = (RadioButton) findViewById(R.id.search_date_button_exact);
		resolve = (RadioButton) findViewById(R.id.search_button_resolve);
		notResolve = (RadioButton) findViewById(R.id.search_button_notReslove);
		nameInput = (EditText) findViewById(R.id.search_name_input);
		rewardInput = (EditText) findViewById(R.id.search_reward_input);
		locStateInput = (EditText) findViewById(R.id.search_state_input);
		locCityInput = (EditText) findViewById(R.id.search_city_input);
		monthInput = (EditText) findViewById(R.id.search_month_input);
		dayInput = (EditText) findViewById(R.id.search_day_input);
		yearInput = (EditText) findViewById(R.id.search_year_input);
		categoryList = (Spinner) findViewById(R.id.search_category_input);
		rgDate = (RadioGroup) findViewById(R.id.search_dateRadioGroup);
		rgLostFound = (RadioGroup) findViewById(R.id.search_lostFound_radioGroup);
		rgResolve = (RadioGroup) findViewById(R.id.search_resolve_radioGroup);
		bFilter = (Button) findViewById(R.id.search_button_filter);
		bCancel = (Button) findViewById(R.id.search_button_cancel);
		
		// what happens when you click the filter button
		bFilter.setOnClickListener(new View.OnClickListener(){
			
			@Override
			public void onClick(View v) {
				// set the strings to inputs from the layout
				strName = nameInput.getText().toString();
				strReward = rewardInput.getText().toString();
				strLocState = locStateInput.getText().toString();
				strLocCity = locCityInput.getText().toString();
				strMonth = monthInput.getText().toString();
				strDay = dayInput.getText().toString();
				strYear = yearInput.getText().toString();
				strCategory = categoryList.getSelectedItem().toString();
				
				int radioInt = rgLostFound.getCheckedRadioButtonId();
				if(radioInt == R.id.button_item_found) {
					boolFound = true;
					boolLost = false;
				}
				else if(radioInt == R.id.button_item_lost) {
					boolFound = false;
					boolLost = true;
				}

				// check through the filter options to see if there needs to be 
				//	a search
				filteredArray = searchItems(strName, strReward, strLocCity,strLocState, 
						strMonth, strDay, strYear, strCategory, boolFound, 
						boolLost,after.isChecked(),before.isChecked(),exact.isChecked(),
						resolve.isChecked(),notResolve.isChecked());
				
				// return filtered array back to previous intent
				Intent myGoto1 = new Intent(v.getContext(), SearchActivity.class);
				myGoto1.putExtra("array", filteredArray);
				v.getContext().startActivity(myGoto1);
				
			}
			
		});
		
		// what happens when you click the cancel button
		bCancel.setOnClickListener(new View.OnClickListener(){

			@Override
			public void onClick(View v) {
				
				// return filtered array back to previous intent
				Intent myGoto1 = new Intent(v.getContext(), SearchActivity.class);
				myGoto1.putExtra("array", filteredArray);
				v.getContext().startActivity(myGoto1);
				
			}
			
		});
	
	}
	
	private static ArrayList<Item> searchItems(String name, String reward, 
			String locCity,String locState, String month, String day, String year, 
			String category, boolean found, boolean lost, boolean isAfter,
			boolean isBefore, boolean isExact, boolean isResolved, boolean isNotResolved) {
		
		ArrayList<Item> array = Search.items;
		
		if (!name.equals("")) {
			array = Search.byTitle(name, array);
		}
		if (!reward.equals("")) {
			array = Search.byReward(reward, array);
		}
		if (!locCity.equals("")) {
			array = Search.byCity(locCity, array);
		}
		if (!locState.equals("")) {
			array = Search.byState(locState, array);
		}
		if (!month.equals("") && isAfter) {
			array = Search.byMonthAfter(Integer.parseInt(month), array);
		}
		if (!month.equals("")&& isBefore) {
			array = Search.byMonthBefore(Integer.parseInt(month), array);
		}
		if (!month.equals("") && isExact) {
			array = Search.byMonthExact(Integer.parseInt(month), array);
		}
		if (!day.equals("") && isAfter) {
			array = Search.byDayAfter(Integer.parseInt(day), array);
		}
		if (!day.equals("") && isBefore) {
			array = Search.byDayBefore(Integer.parseInt(day), array);
		}
		if (!day.equals("") && isExact) {
			array = Search.byDayExact(Integer.parseInt(day), array);
		}
		if (!year.equals("") && isAfter) {
			array = Search.byYearAfter(Integer.parseInt(year), array);
		}
		if (!year.equals("") && isBefore) {
			array = Search.byYearBefore(Integer.parseInt(year), array);
		}
		if (!year.equals("") && isExact) {
			array = Search.byYearExact(Integer.parseInt(year), array);
		}
		if (isResolved){
			array = Search.byIsResolved(isResolved, array);
		}
		if (isNotResolved){
			array = Search.byIsResolved(isNotResolved, array);
		}
		if (!category.equals("General") && !category.equals(null) && 
				!category.equals("")) {
			array = Search.byCategory(category, array);
		}
		if (found || lost) {
			array = Search.byIsFound(found, array); 
		}
		return array;
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.menu, menu);
		return true;
	}

}
